<?php
/**
 * @file
 * Openlayers module - installation procedure.
 */


/**
 * Implements hook_uninstall().
 */
function openlayers_uninstall() {
  // Get module variables.
  global $conf;
  foreach (array_keys($conf) as $key) {
    // Find variables that have the module prefix.
    if (strpos($key, 'openlayers_') === 0) {
      variable_del($key);
    }
  }
}

/**
 * Implements hook_schema().
 */
function openlayers_schema() {
  $schema = array();
  // Maps table (ctools extras).
  $schema['openlayers_maps'] = array(
    'description' => 'Storage for User defined OpenLayers maps.',
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_map',
      'default hook' => 'default_openlayers_maps',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_maps',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'description' => 'The primary identifier for the map.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The title of the map.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The description of the map.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Map service.',
      ),
      'options' => array(
        'description' => 'The serialized map.',
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Layers table (ctools extras).
  $schema['openlayers_layers'] = array(
    'description' => 'Storage for user defined OpenLayers layers.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_layer',
      'default hook' => 'default_openlayers_layers',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_layers',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'Layer system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Layer name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Layer description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Layer service.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Layer options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Sources table (ctools extras).
  $schema['openlayers_sources'] = array(
    'description' => 'Storage for user defined OpenLayers sources.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_source',
      'default hook' => 'default_openlayers_sources',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_sources',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'Source system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Source name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Source description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Service class.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Source options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Controls table.
  $schema['openlayers_controls'] = array(
    'description' => 'Storage for user defined OpenLayers controls.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_control',
      'default hook' => 'default_openlayers_controls',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_controls',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Control system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Control name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Control description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Control service.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Control options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Interactions table.
  $schema['openlayers_interactions'] = array(
    'description' => 'Storage for user defined OpenLayers interactions.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_interaction',
      'default hook' => 'default_openlayers_interactions',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_interactions',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Interaction system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Interaction name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Interaction description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Interaction service.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Interaction options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Components table.
  $schema['openlayers_components'] = array(
    'description' => 'Storage for user defined OpenLayers components.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_component',
      'default hook' => 'default_openlayers_components',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_components',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Component system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Component name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Component description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Component service.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Component options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Projections table.
  $schema['openlayers_projections'] = array(
    'description' => 'Storage for user defined OpenLayers projections.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_projection',
      'default hook' => 'default_openlayers_projections',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_projections',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Projection system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Projection name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Projection description.',
      ),
      'definition' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Projection options definition.',
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // Styles table.
  $schema['openlayers_styles'] = array(
    'description' => 'Storage for user defined OpenLayers styles.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'ol_style',
      'default hook' => 'default_openlayers_styles',
      'cache defaults' => TRUE,
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_openlayers_styles',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Style system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Style name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Style description.',
      ),
      'factory_service' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Style service.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Style options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  return $schema;
}

/**
 * Implements hook__requirements().
 */
function openlayers_requirements($phase) {
  $requirements = array();
  $t = get_t();

  if ($phase != 'install') {
    $ol3 = libraries_detect('openlayers3');

    if ($ol3) {
      $requirements['openlayers3'] = array(
        'title' => $t('OpenLayers library installed'),
        'severity' => REQUIREMENT_OK,
        'value' => $t('OpenLayers %version library installed at %path', array('%path' => $ol3['library path'], '%version' => $ol3['version'])),
      );
    }
    else {
      $requirements['openlayers3'] = array(
        'title' => $t('OpenLayers'),
        'severity' => REQUIREMENT_ERROR,
        'value' => $t('OpenLayers library was not found.'),
      );
    }
  }

  return $requirements;
}
