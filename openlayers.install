<?php

/**
 * Implements hook_uninstall().
 */
function openlayers_uninstall() {
  // Get module variables
  global $conf;
  foreach (array_keys($conf) as $key) {
    // Find variables that have the module prefix
    if (strpos($key, 'openlayers_') === 0) {
      variable_del($key);
    }
  }
}

/**
 * Implements hook_schema().
 */
function openlayers_schema() {
  $schema = array();
  // Maps table (ctools extras)
  $schema['openlayers_maps'] = array(
    'description' => 'Storage for User defined OpenLayers maps.',
    'export' => array(
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'map',
      'default hook' => 'default_maps',
      //'load all callback' => 'openlayers_maps_load_all',
      //'load all' => 'openlayers_maps_load',
      'object factory' => 'openlayers_maps_factory',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_maps',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'description' => 'The primary identifier for the map.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'The title of the map.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'The description of the map.',
        'type' => 'text',
        'not null' => TRUE,
      ),
      'class' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Map class.',
      ),
      'options' => array(
        'description' => 'The serialized map.',
        'type' => 'text',
        'not null' => TRUE,
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // table (ctools extras)
  $schema['openlayers_layers'] = array(
    'description' => 'Storage for user defined OpenLayers layers.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'layer',
      'default hook' => 'default_layers',
      //'load all callback' => 'openlayers_layers_load_all',
      //'load all' => 'openlayers_layers_load',
      'object factory' => 'openlayers_layers_factory',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_layers',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'description.',
      ),
      'class' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'class.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  // table (ctools extras)
  $schema['openlayers_sources'] = array(
    'description' => 'Storage for user defined OpenLayers sources.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'source',
      'default hook' => 'default_sources',
      'load all callback' => 'openlayers_sources_load_all',
      'object factory' => 'openlayers_sources_factory',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_sources',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'description' => 'Source system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Source name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Source description.',
      ),
      'class' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Source class.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Source options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
  );
  $schema['openlayers_controls'] = array(
    'description' => 'Storage for user defined OpenLayers controls.',
    'export' => array(
      'admin_title' => 'machine_name',
      'key' => 'machine_name',
      'key name' => 'Machine name',
      'primary key' => 'machine_name',
      'identifier' => 'control',
      'default hook' => 'default_controls',
      'api' => array(
        'owner' => 'openlayers',
        'api' => 'default_controls',
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'fields' => array(
      'machine_name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Control system name.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
        'default' => '',
        'description' => 'Control name.',
      ),
      'description' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Control description.',
      ),
      'class' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Control class.',
      ),
      'options' => array(
        'type' => 'text',
        'not null' => FALSE,
        'description' => 'Control options serialized.',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('machine_name'),
    'unique keys' => array(
      'machine_name' => array('machine_name'),
    ),
    $schema['openlayers_interactions'] = array(
      'description' => 'Storage for user defined OpenLayers interactions.',
      'export' => array(
        'admin_title' => 'machine_name',
        'key' => 'machine_name',
        'key name' => 'Machine name',
        'primary key' => 'machine_name',
        'identifier' => 'interaction',
        'default hook' => 'default_interactions',
        'api' => array(
          'owner' => 'openlayers',
          'api' => 'default_interactions',
          'minimum_version' => 1,
          'current_version' => 1,
        ),
      ),
      'fields' => array(
        'machine_name' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
          'description' => 'Interaction system name.',
        ),
        'name' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
          'description' => 'Interaction name.',
        ),
        'description' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'Interaction description.',
        ),
        'class' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'Interaction class.',
        ),
        'options' => array(
          'type' => 'text',
          'not null' => FALSE,
          'description' => 'Interaction options serialized.',
          'serialize' => TRUE,
        ),
      ),
      'primary key' => array('machine_name'),
      'unique keys' => array(
        'machine_name' => array('machine_name'),
      ),
    ),
    $schema['openlayers_components'] = array(
      'description' => 'Storage for user defined OpenLayers components.',
      'export' => array(
        'admin_title' => 'machine_name',
        'key' => 'machine_name',
        'key name' => 'Machine name',
        'primary key' => 'machine_name',
        'identifier' => 'component',
        'default hook' => 'default_components',
        'api' => array(
          'owner' => 'openlayers',
          'api' => 'default_components',
          'minimum_version' => 1,
          'current_version' => 1,
        ),
      ),
      'fields' => array(
        'machine_name' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
          'description' => 'Component system name.',
        ),
        'name' => array(
          'type' => 'varchar',
          'length' => '255',
          'not null' => TRUE,
          'default' => '',
          'description' => 'Component name.',
        ),
        'description' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'Component description.',
        ),
        'class' => array(
          'type' => 'text',
          'not null' => TRUE,
          'description' => 'Component class.',
        ),
        'options' => array(
          'type' => 'text',
          'not null' => FALSE,
          'description' => 'Component options serialized.',
          'serialize' => TRUE,
        ),
      ),
      'primary key' => array('machine_name'),
      'unique keys' => array(
        'machine_name' => array('machine_name'),
      ),
    )
  );
  return $schema;
}

function openlayers_requirements($phase) {
  $requirements = array();

  if ($phase != 'install') {
    $ol3 = libraries_detect('openlayers3');

    if ($ol3) {
      $requirements['openlayers3'] = array(
        'title' => 'OpenLayers library installed',
        'severity' => REQUIREMENT_OK,
        'value' => t('OpenLayers %version library installed at %path', array('%path' => $ol3['library path'], '%version' => $ol3['version'])),
      );
    } else {
      $requirements['openlayers3'] = array(
        'title' => t('OpenLayers'),
        'severity' => REQUIREMENT_ERROR,
        'value' => t('OpenLayers library was not found.'),
      );
    }
  }

  return $requirements;
}
