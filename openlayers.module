<?php
/**
 * @file
 * Openlayers module.
 */

include 'includes/openlayers.helpers.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  $path = drupal_get_path('module', 'openlayers') . '/includes';
  return array(
    'version' => 1,
    'path' => $path,
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openlayers_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openlayers') {
    return 'src/Openlayers/' . str_replace("\\", DIRECTORY_SEPARATOR, $plugin);
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openlayers_ctools_plugin_type() {
  return array(
    'Map' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Layer' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Style' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Source' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Control' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Interaction' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'Component' => array(
      'use hooks' => FALSE,
      'classes' => array('class'),
    ),
    'ServiceProvider' => array(
      'cache' => FALSE,
      'classes' => array('class'),
    ),
  );
}

/**
 * Fetches the instance object of a certain type.
 *
 * @param string $object_type
 *   The object type to look up. See openlayers_object_types() for a list of
 *   available object types.
 * @param string $object_class
 *   The object class defined in the plugin.
 * @param null|array $export
 *   The exported object definition.
 *
 * @return mixed|openlayers_error
 *   Returns the instance of the requested object or an instance of
 *  openlayers_error on error.
 */
function openlayers_object_factory_create($object_type, $object_class, $export = array()) {
  ctools_include('plugins');

  if (isset($object_class) && class_exists($object_class)) {

    $object_class = explode('\\', $object_class);
    $name = array_pop($object_class);

    $object = Openlayers::getOLObject($object_type, $name);
  }
  else {
    $object = new \Drupal\openlayers\Types\Error();
    $object->type = $object_type;
    $object->class = $object_class;
  }

  if ($export) {
    $object->init((array) $export);
  }

  return $object;
}


/**
 * Create an object instance for an export.
 *
 * @param string $object_type
 *   The object type to look up. See openlayers_object_types() for a list of
 *   available object types.
 * @param array|string|object $export
 *   The exported object.
 * @param bool $develop
 *
 * @return mixed|openlayers_error
 *   Returns the instance of the requested object or an instance of
 *   openlayers_error on error.
 */
function openlayers_object_load($object_type, $export, $develop = TRUE) {
  ctools_include('export');

  $object = NULL;

  if (is_object($export)) {
    $array_object = new ArrayObject($export);
    $export = $array_object->getArrayCopy();
  }
  if (is_string($export)) {
    $export = (array) ctools_export_crud_load('openlayers_' . $object_type . 's', $export);
  }
  if (is_array($export) && isset($export['class'])) {
    $object = openlayers_object_factory_create($object_type, $export['class'], $export);
  }

  if (!is_object($object)) {
    $args = func_get_args();
    $export = array(
      'machine_name' => $args[1],
      'class' => 'undefined',
      'type' => $object_type,
      'error_message' => 'Unable to load @type object @machine_name.',
    );
    return openlayers_object_factory_create($object_type, 'undefined', $export);
  }

  if (isset($export['disabled']) && ($export['disabled'] == 1 || $export['disabled'] == TRUE)) {
    $object->disabled = 1;
  }

  if ($develop) {
    $object->develop();
  }

  return $object;
}

/**
 * Returns a list of available object types.
 *
 * @return array
 *   List of object types.
 */
function openlayers_object_types() {
  return array(
    'style',
    'layer',
    'source',
    'control',
    'interaction',
    'component',
  );
}

/**
 * Implements hook_libraries_info().
 */
function openlayers_libraries_info() {
  $libraries['openlayers3'] = array(
    'name' => 'OpenLayers3',
    'vendor url' => 'http://openlayers.org/',
    'download url' => 'TODO',
    'version arguments' => array(
      'file' => 'build/ol.js',
      'pattern' => '@Version: (.*)@',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'closure-library/closure/goog/base.js' => array(
          'type' => 'file',
          'weight' => 0,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
        'build/ol-deps.js' => array(
          'type' => 'file',
          'weight' => 3,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
        'build/ol.js' => array(
          'type' => 'file',
          'weight' => 6,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
      ),
      'css' => array('css/ol.css'),
    ),
    'integration files' => array(
      'openlayers' => array(
        'js' => array(
          'js/openlayers.js' => array(
            'type' => 'file',
            'weight' => 8,
            'group' => \Drupal\openlayers\Config::JS_GROUP,
          ),
        ),
        'css' => array(
          'css/openlayers.css' => array('weight' => 10),
        ),
      ),
    ),
    'variants' => array(
      'debug' => array(
        'files' => array(
          'js' => array(
            'closure-library/closure/goog/base.js' => array(
              'type' => 'file',
              'weight' => 0,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
            'build/ol-deps.js' => array(
              'type' => 'file',
              'weight' => 3,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
            'build/ol-debug.js' => array(
              'type' => 'file',
              'weight' => 6,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
          ),
          'css' => array('css/ol.css'),
        ),
        'integration files' => array(
          'openlayers' => array(
            'js' => array(
              'js/openlayers.js' => array(
                'type' => 'file',
                'weight' => 8,
                'group' => \Drupal\openlayers\Config::JS_GROUP,
              ),
              'js/debug.js' => array(
                'type' => 'file',
                'weight' => 7,
                'group' => \Drupal\openlayers\Config::JS_GROUP,
              ),
            ),
            'css' => array(
              'css/openlayers.css' => array(
                'weight' => 10,
              ),
            ),
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function openlayers_element_info() {
  return array(
    'openlayers' => array(
      '#input' => FALSE,
      '#tree' => TRUE,
      '#process' => array('openlayers_element_process_callback'),
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Process callback for the openlayers form element.
 *
 * Renders the map and returns the markup in an renderable array.
 */
function openlayers_element_process_callback($element, &$form_state) {
  $map = openlayers_object_load('map', $element['#map']);
  $element['map'] = $map->build();

  return $element;
}

/**
 * Implements hook_block_info().
 */
function openlayers_block_info() {
  ctools_include('export');
  $all_maps = ctools_export_crud_load_all('openlayers_maps');
  $blocks = array();

  foreach ($all_maps as $key => $map) {
    $map = openlayers_object_load('map', $map->machine_name);
    if ($map->getOption('provideBlock', 1)) {
      $key = _openlayers_get_block_id($key);
      $blocks[$key]['info'] = t('OpenLayers block for %machine_name', array('%machine_name' => $map->machine_name));
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlayers_block_view($delta = '') {
  ctools_include('export');
  $block = array();
  $delta = _openlayers_get_map_name($delta);

  if ($map = openlayers_object_load('map', $delta)) {
    if ($map->getOption('provideBlock', 1)) {
      $block['subject'] = $map->machine_name;
      $block['content'] = $map->build();
    }
  }

  return $block;
}

/**
 * Helper function that returns the blocks delta according to the map_name.
 *
 * @param string $map_name
 *   The name of the map.
 *
 * @return string
 *   The block delta.
 */
function _openlayers_get_block_id($map_name) {
  return substr(sha1($map_name), 0, -32) . '_mapblock';
}
/**
 * Helper function return the map name according to the block delta.
 *
 * @param string $delta
 *   The block delta.
 *
 * @return string
 *   The name of the map.
 */
function _openlayers_get_map_name($delta) {
  $all_maps = ctools_export_crud_load_all('openlayers_maps');

  foreach ($all_maps as $key => $map) {
    if (_openlayers_get_block_id($key) == $delta) {
      return $key;
    }
  }
  return FALSE;
}

/**
 * Returns an array with positioning options.
 *
 * @return array
 *   Array with positioning options.
 */
function openlayers_positioning_options() {
  return array(
    'bottom-left' => t('bottom-left'),
    'bottom-center' => t('bottom-center'),
    'bottom-right' => t('bottom-right'),
    'center-left' => t('center-left'),
    'center-center' => t('center-center'),
    'center-right' => t('center-right'),
    'top-left' => t('top-left'),
    'top-center' => t('top-center'),
    'top-right' => t('top-right'),
  );
}

/**
 * Returns an array with available source options.
 *
 * @param bool $empty_option
 *   If disabled no empty option is added.
 *
 * @return array
 *   Array with source options.
 */
function openlayers_source_options($empty_option = TRUE) {
  $sources = ctools_export_crud_load_all('openlayers_sources');
  $options = array();
  if ($empty_option) {
    $options[''] = t('<Choose the source>');
  }
  foreach ($sources as $machine_name => $data) {
    $options[$machine_name] = $data->name;
  }
  return $options;
}

/**
 * Returns an array with available layer options.
 *
 * @param bool $empty_option
 *   If disabled no empty option is added.
 *
 * @return array
 *   Array with layer options.
 */
function openlayers_layer_options($empty_option = TRUE) {
  $layers = ctools_export_crud_load_all('openlayers_layers');
  $options = array();
  if ($empty_option) {
    $options[''] = t('<Choose the layer>');
  }
  foreach ($layers as $machine_name => $data) {
    $options[$machine_name] = $data->name;
  }
  return $options;
}

/**
 *  Implements hook_init().
 */
function openlayers_init() {
  Openlayers::init();

  $olObject = Openlayers::getOLObject('component', 'Autopopup');

  dpm($olObject);
}
