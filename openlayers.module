<?php

include 'includes/Classes/openlayers.config.inc';
include 'includes/Interfaces/openlayers.object.interface.inc';
include 'includes/Interfaces/openlayers.map.interface.inc';
include 'includes/Interfaces/openlayers.layer.interface.inc';
include 'includes/Interfaces/openlayers.style.interface.inc';
include 'includes/Interfaces/openlayers.source.interface.inc';
include 'includes/Interfaces/openlayers.control.interface.inc';
include 'includes/Interfaces/openlayers.interaction.interface.inc';
include 'includes/Interfaces/openlayers.component.interface.inc';
include 'includes/Classes/openlayers.object.inc';
include 'includes/Classes/openlayers.error.inc';
include 'includes/Classes/openlayers.component.inc';
include 'includes/Classes/openlayers.interaction.inc';
include 'includes/Classes/openlayers.map.inc';
include 'includes/Classes/openlayers.control.inc';
include 'includes/Classes/openlayers.style.inc';
include 'includes/Classes/openlayers.layer.inc';
include 'includes/Classes/openlayers.source.inc';
include 'includes/openlayers.helpers.inc';

function openlayers_ctools_plugin_api($module, $api) {
  $path = drupal_get_path('module', 'openlayers') . '/includes';
  return array(
    'version' => 1,
    'path' => $path
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openlayers_ctools_plugin_directory($module, $plugin) {
  return 'plugins/openlayers/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openlayers_ctools_plugin_type() {
  return array(
    'map' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'layer' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'style' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'source' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'control' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'interaction' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    ),
    'component' => array(
      'use hooks' => FALSE,
      'classes' => array('handler')
    )
  );
}

function openlayers_object_factory_create($object_type, $object_class, $export = NULL) {
  ctools_include('plugins');

  $object_class = ctools_plugin_load_class('openlayers', $object_type, $object_class, 'handler');

  if (isset($object_class)) {
    $object = call_user_func(array(
        new ReflectionClass($object_class), 'newInstance')
    );
  } else {
    $object = new openlayers_error();
    $object->type = $object_type;
    $object->class = $object_class;
  }

  if ($export) {
    $object->init((array) $export);
  }

  return $object;
}


function openlayers_object_load($object_type, $export, $develop = TRUE) {
  ctools_include('export');

  $object = NULL;

  if (is_object($export)) {
    $arrayObject = new ArrayObject($export);
    $export = $arrayObject->getArrayCopy();
  }
  if (is_string($export)) {
    $export = (array) ctools_export_crud_load('openlayers_' . $object_type .'s', $export);
  }
  if (is_array($export) && isset($export['class'])) {
    $object = openlayers_object_factory_create($object_type, $export['class'], $export);
  }

  if (!is_object($object)) {
    $args = func_get_args();
    $export = array(
      'machine_name' => $args[1],
      'class' => 'undefined',
      'type' => $object_type,
      'error_message' => 'Unable to load @type object @machine_name.'
    );
    return openlayers_object_factory_create($object_type, 'undefined', $export);
  }

  if (isset($export['disabled']) && ($export['disabled'] == 1 || $export['disabled'] == TRUE)) {
    $object->disabled = 1;
  }

  if ($develop) {
    $object->develop();
  }

  return $object;
}

function openlayers_render_build_map(openlayers_map $map) {
  drupal_alter('openlayers_map_preprocess', $map);

  $objects = $map->getObjects();
  $attached = $map->attached();
  $objects['map'] = $map;

  drupal_alter('openlayers_map', $map);

  $setting = array(
    'openlayers' => array(
      'maps' => array(
        $map->getId() => $map->getJSObjects()
      )
    )
  );

  $attached['js'][] = array(
    'data' => $setting,
    'type' => 'setting'
  );

  $current_path = current_path();
  if ('system/ajax' == $current_path) {
    $current_path = $_SESSION['current_path'];
  }

  $links = array(
    'openlayers' => array(
      'title' => 'Edit this map',
      'href' => 'admin/structure/openlayers/maps/list/' . $map->machine_name . '/edit',
      'query' => array(
        'destination' => $current_path
      )
    ),
  );

  $styles = array(
    'width' => $map->getOption('width'),
    'height' => $map->getOption('height')
  );

  $css_styles = '';
  foreach ($styles as $property => $value) {
    $css_styles .= $property . ':' . $value . ';';
  }

  $build = array(
    '#type' => 'container',
    'contextual_links' => array(
      '#prefix' => '<div class="contextual-links-wrapper">',
      '#suffix' => '</div>',
      '#theme' => 'links__contextual',
      '#links' => $links,
      '#attributes' => array('class' => array('contextual-links')),
      '#attached' => array(
        'library' => array(array('contextual', 'contextual-links')),
      ),
    ),
    '#attributes' => array(
      'id' => 'openlayers-container-' . $map->getId(),
      'style' => $css_styles,
      'class' => array(
        'contextual-links-region',
        'openlayers-container'
      )
    ),
    'map' => array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#value' => '',
      '#attributes' => array(
        'id' => $map->getId(),
        'class' => array(
          'openlayers-map',
          $map->getId()
        ),
      ),
      '#attached' => array(
        'library' => $attached['library'],
        'libraries_load' => $attached['libraries_load'],
        'js' => $attached['js'],
        'css' => $attached['css']
      ),
    )
  );

  if ($map->getOption('contextualLinks') == FALSE) {
    unset($build['contextual_links']);
  }

  // This is temporary and will need to be worked on.
  foreach(array('style', 'layer', 'source', 'control', 'interaction', 'component') as $type) {
    foreach($objects[$type] as $object) {
      $object->alterBuild($build);
    }
  }

  return $build;
}

function openlayers_render_map(openlayers_map $map) {
  $build = openlayers_render_build_map($map);
  return render($build);
}

/**
 * Implements hook_libraries_info().
 */
function openlayers_libraries_info() {
  $libraries['openlayers3'] = array(
    'name' => 'OpenLayers3',
    'vendor url' => 'http://openlayers.org/',
    'download url' => 'TODO',
    'version arguments' => array(
      'file' => 'build/ol.js',
      'pattern' => '@Version: (.*)@',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array('closure-library/closure/goog/base.js', 'build/ol-deps.js', 'build/ol.js'),
      'css' => array('css/ol.css')
    ),
    'integration files' => array(
      'openlayers' => array(
        'js' => array('js/openlayers.js' => array('type'=>'file', 'weight' => 0, 'group' => openlayers_config::JS_GROUP)),
        'css' => array('css/openlayers.css' => array('weight' => 10))
      ),
    ),
    'variants' => array(
      'debug' => array(
        'files' => array(
          'js' => array('closure-library/closure/goog/base.js', 'build/ol-deps.js', 'build/ol-debug.js'),
          'css' => array('css/ol.css')
        ),
      )
    )
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 *
 * @return array
 */
function openlayers_element_info() {
  return array(
    'openlayers' => array(
      '#input' => FALSE,
      '#tree' => TRUE,
      '#process' => array('openlayers_element_process_callback'),
      '#theme_wrappers' => array('form_element')
    )
  );
}

function openlayers_element_process_callback($element, &$form_state) {
  $map = openlayers_object_load('map', $element['#map']);
  $build = openlayers_render_map($map);
  $element['map'] = array(
    '#markup' => $build
  );

  return $element;
}

/**
 * Implements hook_block_info().
 */
function openlayers_block_info() {
  ctools_include('export');
  $all_maps = ctools_export_crud_load_all('openlayers_maps');
  $blocks = array();

  foreach ($all_maps as $key => $map) {
    $map = openlayers_object_load('map', $map->machine_name);
    if ($map->getOption('provideBlock', 1)) {
      $key = _openlayers_get_block_id($key);
      $blocks[$key]['info'] = t('OpenLayers block for ' . $map->machine_name);
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function openlayers_block_view($delta = '') {
  ctools_include('export');
  $block = array();
  $delta = _openlayers_get_map_name($delta);

  if ($map = openlayers_object_load('map', $delta)) {
    if ($map->getOption('provideBlock', 1)) {
      $block['subject'] = $map->machine_name;
      $block['content'] = openlayers_render_map($map);
    }
  }

  return $block;
}

/**
 * Helper function
 * Return the blocks delta according to the map_name.
 */
function _openlayers_get_block_id($map_name) {
  return substr(sha1($map_name), 0, -32) . '_mapblock';
}
/**
 * Helper function
 * Return the map name according to the block delta.
 */
function _openlayers_get_map_name($delta) {
  $all_maps = ctools_export_crud_load_all('openlayers_maps');

  foreach ($all_maps as $key => $map) {
    if (_openlayers_get_block_id($key) == $delta) {
      return $key;
    }
  }
  return FALSE;
}
