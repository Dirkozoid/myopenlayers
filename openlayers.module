<?php

/**
 * @defgroup openlayers OpenLayers provides an API and
 * Modules to interface with OpenLayers
 */

/**
 * @file
 * Main OpenLayers API File
 *
 * This file holds the main Drupal hook functions,
 * and the openlayers API functions for the openlayers module.
 *
 * @ingroup openlayers
 */

/**
 * OpenLayers hosted default library.
 */
define('OPENLAYERS_DEFAULT_LIBRARY', 'http://openlayers.org/api/2.12/OpenLayers.js');

/**
 * OpenLayers library compatible suggestion.
 */
define('OPENLAYERS_SUGGESTED_LIBRARY', 2.12);

/**
 * OpenLayers hosted API version.  What version is used when going to
 * http://openlayers.org/api/OpenLayers.js
 */
define('OPENLAYERS_HOSTED_API_LIBRARY', 2.12);

require_once 'includes/openlayers_projection.class.inc';
require_once 'includes/openlayers_behavior.class.inc';
require_once 'includes/openlayers_layer_type.class.inc';
module_load_include('inc', 'openlayers','includes/openlayers.tools');
module_load_include('inc', 'openlayers','includes/openlayers.projections');
module_load_include('inc', 'openlayers','includes/openlayers.behaviors');
module_load_include('inc', 'openlayers','includes/openlayers.layers');
module_load_include('inc', 'openlayers','includes/openlayers.styles');
module_load_include('inc', 'openlayers','includes/openlayers.maps');

/**
 * Implements hook_help().
 */
function openlayers_help($path, $arg) {
  switch ($path) {
    case 'admin/help#openlayers':
      return '<p>' . t('The OpenLayers module is the base module for the
        OpenLayers suite of modules, and provides the main API.') . '</p>';
  }
  return '';
}

/**
 * Implements hook_theme().
 */
function openlayers_theme($existing, $type, $theme, $path) {
  return array(
    'openlayers_map' => array(
      'arguments' => array(
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
      'template' => '/templates/openlayers-map',
      'render element' => 'element'
    ),
    'openlayers_styles' => array(
      'arguments' => array(
        'styles' => array(),
        'map' => array(),
      ),
      'file' => 'includes/openlayers.theme.inc',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openlayers_ctools_plugin_type() {
  return array(
    'behaviors' => array(
      'classes' => array('behavior'),
      'use hooks' => TRUE
    ),
    'layer_types' => array(
      'classes' => array('layer_types'),
      'use hooks' => TRUE
    ),
    'projections' => array(
      'classes' => array('projection'),
      'use hooks' => TRUE
    )
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_maps':
        return array('version' => 1);

      case 'openlayers_layers':
        return array('version' => 1);

      case 'openlayers_projections':
        return array('version' => 1);

      case 'openlayers_styles':
        return array('version' => 1);

      case 'openlayers_layer_types':
        return array('version' => 1);

      case 'openlayers_behaviors':
        return array('version' => 1);

    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function openlayers_libraries_info() {
  $ctools_objects = array_merge(openlayers_behaviors(), openlayers_layer_types());
  $ol_variant = variable_get('openlayers_source_internal_variant', 'original');

  foreach ($ctools_objects as $key => $plugin) {
    $class = $plugin['class'];
    $plugin['files'] = !empty($plugin['files']) ? (array) $plugin['files'] : array();

    // Autodetect if any CSS or JS files.
    $files = array();
    foreach (array('css', 'js') as $ext) {
      $file = $plugin['path'] . '/' . $class . '.' . $ext;
      if (file_exists($file)) {
        $files[$ext][] = $class . '.' . $ext;
      }
    }

    // Add files from the ctools plugin definition if any.
    $files += $plugin['files'];

    // Build the library.
    $libraries[$class] = array(
      'name' => $class,
      'files' => $files,
      'library path' => $plugin['path'],
      'version' => '2.x',
      'dependencies' => array('openlayers'),
      'dependency variants' => array($ol_variant),
      'callbacks' => array(
        'pre-dependencies-load' => array(
          'openlayers_load_library_dependency_variants_callback'
        )
      )
    );
  }

  $libraries['openlayers'] = array(
    'name' => 'OpenLayers',
    'vendor url' => 'http://openlayers.org/',
    'download url' => 'http://openlayers.org/download/OpenLayers-2.12.tar.gz',
    'version arguments' => array(
      'file' => 'lib/OpenLayers.js',
      'pattern' => '/OpenLayers.VERSION_NUMBER="Release (.*?)"/',
      'lines' => 417,
    ),
    'files' => array(
      'js' => array('OpenLayers.js'),
    ),
    'variants' => array(
      'original debug' => array(
        'files' => array(
          'js' => array(
            'OpenLayers.debug.js'
          ),
        ),
      ),
      'light' => array(
        'files' => array(
          'js' => array(
            'OpenLayers.light.js'
          ),
        ),
      ),
      'light debug' => array(
        'files' => array(
          'js' => array(
            'OpenLayers.light.debug.js'
          ),
        ),
      ),
      'mobile' => array(
        'files' => array(
          'js' => array(
            'OpenLayers.mobile.js'
          )
        ),
      ),
      'mobile debug' => array(
        'files' => array(
          'js' => array(
            'OpenLayers.mobile.debug.js'
          )
        ),
      ),
    ),
    'integration files' => array(
      'openlayers' => array(
        'js' => array('js/openlayers.js'),
        'css' => array('css/openlayers.css')
      ),
    ),
  );

  return $libraries;
}

/**
 * Pre-dependencies-load callback.
 *
 * @param $library
 */
function openlayers_load_library_dependency_variants_callback($library) {
  foreach ($library['dependencies'] as $i => $name) {
    if ($library['dependency variants'][$i] != 'original') {
      libraries_load($name, $library['dependency variants'][$i]);
    } else {
      libraries_load($name);
    }
  }
}

/**
 * Implements hook_element_info().
 *
 * @return array
 */
function openlayers_element_info() {
  return array(
    'openlayers' => array(
      '#pre_render' => array('openlayers_element_pre_render_callback'),
      '#theme' => array('openlayers_map'),
      '#theme_wrappers' => array('form_element')
    )
  );
}

/**
 * Callback.
 *
 * @param $element
 * @return mixed
 */
function openlayers_element_pre_render_callback($element) {
  if (is_string($element['#map'])) {
    $map = openlayers_render_map($element['#map']);
    $element['#attached'] = $map['#attached'];
    $element['map'] = $map['map'];
  }

  if (is_array($element['#map'])) {
    $element['map'] = $element['#map'];
  }

  return $element;
}
