<?php
/**
 * @file
 * Openlayers module.
 */

include 'includes/openlayers.helpers.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function openlayers_ctools_plugin_api($module, $api) {
  $path = drupal_get_path('module', 'openlayers') . '/includes';
  return array(
    'version' => 1,
    'path' => $path,
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openlayers_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'openlayers') {
    return 'src/Openlayers/' . str_replace("\\", DIRECTORY_SEPARATOR, $plugin_type);
  }
  if ($owner == 'service_container') {
    return 'src/ServiceContainer/' . $plugin_type;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openlayers_ctools_plugin_type() {
  return array(
    'Map' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Layer' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Style' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Source' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Control' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Interaction' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
    'Component' => array(
      'use hooks' => FALSE,
      'extension' => 'php'
    ),
  );
}

/**
 * Create an object instance for an export.
 *
 * @param string $object_type
 *   The object type to look up. See openlayers_object_types() for a list of
 *   available object types.
 * @param array|string|object $export
 *   The exported object.
 *
 * @return mixed|openlayers_error
 *   Returns the instance of the requested object or an instance of
 *   openlayers_error on error.
 */
function openlayers_object_load($object_type, $export) {
  // @todo: This needs to be refactored properly.
  Openlayers::init();
  ctools_include('export');

  $object = NULL;

  if (is_object($export)) {
    $array_object = new ArrayObject($export);
    $export = $array_object->getArrayCopy();
  }
  if (is_string($export)) {
    // @todo: what to do when the exportable is not found ?
    $export = (array) ctools_export_crud_load('openlayers_' . strtolower($object_type) . 's', $export);
  }

  if (is_array($export) && isset($export['factory_service']) && Openlayers::hasService($export['factory_service'])) {
    $service = explode('.', $export['factory_service']);
    // @todo: What to do when the service is not found ?
    $object = Openlayers::service($service[0] . '.' . $service[1])->createInstance($service[3]);
    $object->init($export);
  }
/*
  if (!is_object($object)) {
    $args = func_get_args();
    $export = array(
      'machine_name' => $args[1],
      'factory_service' => 'undefined',
      'type' => $object_type,
      'error_message' => 'Unable to load @type object @machine_name.',
    );
    $object = new \Drupal\openlayers\Types\Error();
    $object->type = $object_type;
    $object->class = $object_type . ':' . $export['factory_service'];
    $object->init($export);
    return $object;
  }
*/
  if (isset($export['disabled']) && ($export['disabled'] == 1 || $export['disabled'] == TRUE)) {
    $object->disabled = 1;
  }

  return $object;
}

/**
 * Implements hook_libraries_info().
 */
function openlayers_libraries_info() {
  $libraries['openlayers3'] = array(
    'name' => 'OpenLayers3',
    'vendor url' => 'http://openlayers.org/',
    'download url' => 'TODO',
    'version arguments' => array(
      'file' => 'build/ol.js',
      'pattern' => '@Version: (.*)@',
      'lines' => 3,
    ),
    'files' => array(
      'js' => array(
        'closure-library/closure/goog/base.js' => array(
          'type' => 'file',
          'weight' => 0,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
        'build/ol-deps.js' => array(
          'type' => 'file',
          'weight' => 3,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
        'build/ol.js' => array(
          'type' => 'file',
          'weight' => 6,
          'group' => \Drupal\openlayers\Config::JS_GROUP,
        ),
      ),
      'css' => array('css/ol.css'),
    ),
    'integration files' => array(
      'openlayers' => array(
        'js' => array(
          'js/openlayers.js' => array(
            'type' => 'file',
            'weight' => 8,
            'group' => \Drupal\openlayers\Config::JS_GROUP,
          ),
        ),
        'css' => array(
          'css/openlayers.css' => array('weight' => 10),
        ),
      ),
    ),
    'variants' => array(
      'debug' => array(
        'files' => array(
          'js' => array(
            'closure-library/closure/goog/base.js' => array(
              'type' => 'file',
              'weight' => 0,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
            'build/ol-deps.js' => array(
              'type' => 'file',
              'weight' => 3,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
            'build/ol-debug.js' => array(
              'type' => 'file',
              'weight' => 6,
              'group' => \Drupal\openlayers\Config::JS_GROUP,
            ),
          ),
          'css' => array('css/ol.css'),
        ),
        'integration files' => array(
          'openlayers' => array(
            'js' => array(
              'js/openlayers.js' => array(
                'type' => 'file',
                'weight' => 8,
                'group' => \Drupal\openlayers\Config::JS_GROUP,
              ),
              'js/debug.js' => array(
                'type' => 'file',
                'weight' => 7,
                'group' => \Drupal\openlayers\Config::JS_GROUP,
              ),
            ),
            'css' => array(
              'css/openlayers.css' => array(
                'weight' => 10,
              ),
            ),
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info().
 */
function openlayers_element_info() {
  return array(
    'openlayers' => array(
      '#input' => FALSE,
      '#tree' => TRUE,
      '#process' => array('openlayers_element_process_callback'),
      '#theme_wrappers' => array('form_element'),
    ),
  );
}

/**
 * Process callback for the openlayers form element.
 *
 * Renders the map and returns the markup in an renderable array.
 */
function openlayers_element_process_callback($element, &$form_state) {
  $map = openlayers_object_load('Map', $element['#map']);
  $element['map'] = $map->build();

  return $element;
}

